//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MainVersionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MainVersion), typeof(System.Object));
		L.RegFunction("New", _CreateMainVersion);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Version", get_Version, set_Version);
		L.RegVar("baseVersion", get_baseVersion, set_baseVersion);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMainVersion(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MainVersion obj = new MainVersion();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MainVersion.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Version(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MainVersion.Version);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_baseVersion(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, MainVersion.baseVersion);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Version(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			MainVersion.Version = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_baseVersion(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			MainVersion.baseVersion = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

