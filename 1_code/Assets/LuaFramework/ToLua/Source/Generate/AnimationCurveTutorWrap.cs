//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AnimationCurveTutorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AnimationCurveTutor), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetAnimationCurve", GetAnimationCurve);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("curveName", get_curveName, set_curveName);
		L.RegVar("curve", get_curve, set_curve);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimationCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AnimationCurveTutor obj = (AnimationCurveTutor)ToLua.CheckObject<AnimationCurveTutor>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AnimationCurve o = obj.GetAnimationCurve(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curveName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimationCurveTutor obj = (AnimationCurveTutor)o;
			System.Collections.Generic.List<string> ret = obj.curveName;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curveName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curve(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimationCurveTutor obj = (AnimationCurveTutor)o;
			System.Collections.Generic.List<UnityEngine.AnimationCurve> ret = obj.curve;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curve on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curveName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimationCurveTutor obj = (AnimationCurveTutor)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.curveName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curveName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curve(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimationCurveTutor obj = (AnimationCurveTutor)o;
			System.Collections.Generic.List<UnityEngine.AnimationCurve> arg0 = (System.Collections.Generic.List<UnityEngine.AnimationCurve>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.AnimationCurve>));
			obj.curve = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index curve on a nil value");
		}
	}
}

